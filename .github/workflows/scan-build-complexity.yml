name: scan-build and complexity analysis
on:
  pull_request:
    branches: [ master ]
jobs:
  scan-build:
    runs-on: ubuntu-latest
    env:
      CC: clang-15
      CXX: clang++-15
      VERSION: 15

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: install dependencies
        run: |
          # Install packages
          sudo apt-get update -q
          sudo apt-get install -y clang-$VERSION clang-tools-$VERSION clang-tidy-$VERSION autoconf-archive flex bison libjson-c-dev libxen-dev libvirt-dev libfuse-dev
          git clone --depth=2 https://github.com/libvmi/libkvmi
          cd libkvmi
          ./bootstrap
          ./configure
          make
          sudo make install
          cd ..

      - name: scan-build
        run: |
          autoreconf -vif
          scan-build-$VERSION --status-bugs -disable-checker deadcode.DeadStores ./configure CFLAGS=-DVMI_DEBUG=__VMI_DEBUG_ALL --enable-debug --disable-config-file
          intercept-build-$VERSION make
          analyze-build-$VERSION -v --cdb compile_commands.json --status-bugs --force-analyze-debug-code \
              --disable-checker deadcode.DeadStores \
              --enable-checker security.FloatLoopCounter \
              --enable-checker security.insecureAPI.strcpy

  cognitive-complexity:
    runs-on: ubuntu-latest
    env:
      CC: clang-15
      CXX: clang++-15
      VERSION: 15

    steps:
      - uses: actions/checkout@v3

      - name: install dependencies
        run: |
          # Install packages
          sudo apt-get update -q
          sudo apt-get install -y clang-$VERSION clang-tools-$VERSION clang-tidy-$VERSION autoconf-archive flex bison libjson-c-dev libxen-dev libvirt-dev libfuse-dev
          git clone --depth=2 https://github.com/libvmi/libkvmi
          cd libkvmi
          ./bootstrap
          ./configure
          make
          sudo make install
          cd ..

      - name: calculate complexity of pr
        run: |
          autoreconf -vif
          scan-build-$VERSION --status-bugs -disable-checker deadcode.DeadStores ./configure CFLAGS=-DVMI_DEBUG=__VMI_DEBUG_ALL --enable-debug --disable-config-file
          intercept-build-$VERSION make

          run-clang-tidy-$VERSION -quiet -config="{Checks: 'readability-function-cognitive-complexity', CheckOptions: [{key: readability-function-cognitive-complexity.Threshold, value: 0}, {key: readability-function-cognitive-complexity.DescribeBasicIncrements, value: False}]}" \
              2>/dev/null | grep warning | grep "cognitive complexity" > cognitive-complexity.log || :

          complexity=0
          while read -r log; do
              file=$(echo $log | awk -F":" '{ print $1 }')
              line=$(echo $log | awk -F":" '{ print $2 }')
              function=$(echo $log | awk -F"function" '{ print $2 }' | awk '{ print $1 }' | sed "s/'//g")
              score=$(echo $log | awk -F"cognitive complexity of" '{ print $2 }' | awk '{ print $1 }')

              [[ $score -lt 25 ]] && continue

              echo "Complex function found: $file:$line $function(), complexity score: $score" | tee -a complex-functions.log

              complexity=$(( complexity + score ))
          done < cognitive-complexity.log

          echo "Final complexity sum of complex functions: $complexity"

          mv complex-functions.log /tmp/
          echo $complexity > /tmp/complexity.score

      - uses: actions/checkout@v3
        with:
          ref: master

      - name: calculate complexity of master
        run: |
          autoreconf -vif
          scan-build-$VERSION --status-bugs -disable-checker deadcode.DeadStores ./configure CFLAGS=-DVMI_DEBUG=__VMI_DEBUG_ALL --enable-debug --disable-config-file
          intercept-build-$VERSION make

          run-clang-tidy-$VERSION -quiet -config="{Checks: 'readability-function-cognitive-complexity', CheckOptions: [{key: readability-function-cognitive-complexity.Threshold, value: 0}, {key: readability-function-cognitive-complexity.DescribeBasicIncrements, value: False}]}" \
              2>/dev/null | grep warning | grep "cognitive complexity" > cognitive-complexity.log || :

          complexity=0
          while read -r log; do
              file=$(echo $log | awk -F":" '{ print $1 }')
              line=$(echo $log | awk -F":" '{ print $2 }')
              function=$(echo $log | awk -F"function" '{ print $2 }' | awk '{ print $1 }' | sed "s/'//g")
              score=$(echo $log | awk -F"cognitive complexity of" '{ print $2 }' | awk '{ print $1 }')

              [[ $score -lt 25 ]] && continue

              echo "Complex function found: $file:$line $function(), complexity score: $score" | tee -a complex-functions.log

              complexity=$(( complexity + score ))
          done < cognitive-complexity.log

          echo "Final complexity sum of complex functions: $complexity"
          echo $complexity > complexity.score

      - name: check complexity difference
        run: |
          SCORE_PR=$(cat /tmp/complexity.score)
          SCORE_MAIN=$(cat complexity.score)

          echo "Complexity of PR: $SCORE_PR"
          echo "Complexity of main: $SCORE_MAIN"

          if [ $SCORE_PR -gt $SCORE_MAIN ]; then
            diff complex-functions.log /tmp/complex-functions.log || :

            echo "Cognitive complexity increase, please rework your PR"
            exit 1
          fi
